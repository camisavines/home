{"version":3,"sources":["pages/comingsoon.js","app-router.js","data/routes.js","serviceWorker.js","index.js"],"names":["ComingSoon","style","height","width","display","justifyContent","alignItems","textAlign","className","fontSize","App","useState","theme","setTheme","useEffect","currentThemeColor","localStorage","getItem","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAceA,EAZI,WACf,OACI,yBAAKC,MAAO,CAACC,OAAQ,QAASC,MAAO,QAASC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAUC,UAAW,WACtH,yBAAKC,UAAU,aACX,4CACA,wBAAIP,MAAO,CAACQ,SAAU,QAAtB,sBACA,iIC2CDC,G,YA/BH,WACV,MAA0BC,mBAAS,SAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OAXAC,qBAAU,WACR,IAAMC,EAAoBC,aAAaC,QAAQ,eAE7CJ,EADwB,UAAtBE,EACO,QAEA,UAEV,IAKC,kBAAC,IAAD,CAAQP,UAAS,2BAAsBI,IAGrC,yBAAKJ,UAAS,0BAA+B,UAAVI,EAAoB,WAAa,YAClE,kBAAC,IAAD,CAAOM,OAAK,EAACC,KCvCH,QDuCsBC,UAAWpB,QE3BjCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a0fe60a9.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ComingSoon = () => {\n    return (\n        <div style={{height: \"100vh\", width: \"100vw\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\", textAlign: \"center\"}}>\n            <div className=\"container\">\n                <h3>Camisa Codes</h3>\n                <h1 style={{fontSize: \"4em\"}}>Under Construction</h1>\n                <h5>Hello, my website is currently under construction. Soon, it will be back up with a new design.</h5>\n            </div>\n        </div>\n    )\n}\n\nexport default ComingSoon;","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n\n// import Home from './pages/home';\n// import About from './pages/about';\n// import Resume from './pages/resume';\n// import News from './pages/news';\nimport ComingSoon from './pages/comingsoon';\n\n// import Navbar from './components/navbar';\n// import Footer from './components/footer';\nimport * as ROUTES from \"./data/routes\";\n\n\nimport \"./css/index.css\";\nimport \"./theme.scss\";\n// import \"./css/theme_light.css\";\n// import \"./css/theme_dark.css\";\n\nconst App = () => {\n  const [theme, setTheme] = useState('light');\n\n  useEffect(() => {\n    const currentThemeColor = localStorage.getItem('theme-color');\n    if (currentThemeColor === 'light') {\n      setTheme('light');\n    } else {\n      setTheme('dark');\n    }\n  }, []);\n  \n\n\n  return (\n      <Router className={`app-router theme-${theme}`}>\n        {/* <Navbar setTheme={setTheme} theme={theme} /> */}\n\n        <div className={`container-fluid ${theme === 'light' ? \"bg-light\" : \"bg-dark\"}`}>\n          <Route exact path={ROUTES.HOME} component={ComingSoon} />\n          {/* <Route exact path={ROUTES.HOME} component={Home}/> */}\n          {/* <Route path={ROUTES.ABOUT} component={About} /> */}\n          {/* <Route path={ROUTES.RESUME} component={Resume} /> */}\n          {/* <Route path={ROUTES.NEWS} component={News} /> */}\n        </div>\n\n      {/* <Footer /> */}\n    </Router>\n  );\n}\n\nexport default App;\n","export const HOME = \"/home\";\nexport const ABOUT = \"/about\";\nexport const RESUME = \"/resume\";\nexport const POTFOLIO = \"/portfolio\";\nexport const NEWS = \"/news\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app-router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}